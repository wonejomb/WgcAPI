plugins {
    id 'java-library'
    id 'com.diffplug.spotless'
    id 'maven-publish'
    id 'idea'
}

def getSecrets () {
    Properties properties = new Properties();
    if ( rootProject.file("secrets.properties").exists() )
        properties.load(new FileInputStream(rootProject.file("secrets.properties")))

    return properties;
}

def getChangelog () {
    if ( rootProject.file("changelogs/${mcVersion}-${version}.txt").exists() )
        return rootProject.file("changelogs/${mcVersion}-${version}.txt").getText()

    return "No changelog provided."
}

ext {
    secrets = this.getSecrets()
    secrets.changelog = this.getChangelog()
}

base.archivesName = "[${mcVersion}]${modId}-${project.name.toLowerCase()}"

java {
    toolchain.languageVersion = JavaLanguageVersion.of(project.modJavaVersion)
    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenCentral()

    exclusiveContent {
        forRepository {
            maven {
                name = 'SpongeMaven'
                url = 'https://repo.spongepowered.org/repository/maven-public'
            }
        }
        filter { includeGroupAndSubgroups('org.spongepowered') }
    }

    exclusiveContent {
        forRepositories(
                maven {
                    url = 'https://maven.parchmentmc.org/'
                    name = 'ParchmentMaven'
                },

                maven {
                    url = 'https://maven.neoforged.net/releases'
                    name = 'NeoMaven'
                }
        )
        filter {
            includeGroup('org.parchmentmc.data')
        }
    }

    exclusiveContent {
        forRepository {
            maven {
                name = 'Mojang'
                url = 'https://libraries.minecraft.net/'
            }
        }
        filter {
            includeGroupAndSubgroups('org.lwjgl')
            includeGroupAndSubgroups('com.mojang')
        }
    }

}

spotless {
    java {
        target "src/*/de/leowgc/wgccore/**/*.java"

        endWithNewline()
        trimTrailingWhitespace()
        removeUnusedImports()
        indentWithSpaces()
    }
}


// Declare capabilities on the outgoing configurations.
// Read more about capabilities here: https://docs.gradle.org/current/userguide/component_capabilities.html#sec:declaring-additional-capabilities-for-a-local-component
[ 'apiElements', 'runtimeElements', 'sourcesElements', 'javadocElements' ].each {variant ->
    configurations."${variant}".outgoing {
        capability ("${group}:${base.archivesName.get()}:$version")
        capability ("${group}:${mcVersion}-${modId}-${project.name}:$version")
        capability ("${group}:${modId}:$version")
    }

    publishing.publications.configureEach {
        suppressPomMetadataWarningFor(variant)
    }
}

sourcesJar {
    from(rootProject.file('LICENSE')) {
        rename { "${it}_${mod_name}" }
    }
}

jar {
    from(rootProject.file('LICENSE')) {
        rename { "${it}_${mod_name}" }
    }

    manifest {
        attributes ([
                'Specification-Title': modName,
                'Specification-Vendor': modAuthor,
                'Specification-Version': project.jar.archiveVersion,
                'Implementation-Title': project.name,
                'Implementation-Version': project.jar.archiveVersion,
                'Implementation-Vendor': modAuthor,
                'Built-On-Minecraft': mcVersion
        ])
    }
}

processResources {
    var expandProperties = [
            modId: modId, modName: modName, modVersion: version, modDescription: modDescription, modAuthor: modAuthor, modLicense: modLicense, mcVersion: mcVersion,

            fabricApi: fabricApi, fabricLoader: fabricLoader,
            neoVersion: neoVersion, neoLoader: neoLoader,
            forgeVersion: forgeVersion, forgeRange: forgeLoader
    ]
    inputs.properties expandProperties

    filesMatching( ["pack.mcmeta", "fabric.mod.json", "META-INF/mods.toml", 'META-INF/neoforge.mods.toml'] ) {
        expand expandProperties
    }
}

tasks.withType(Javadoc).configureEach {
    def docletOptions = options as StandardJavadocDocletOptions
    docletOptions.addStringOption('Xdoclint:accessibility,html,reference,syntax', '-quiet')
}

tasks.configureEach { task ->
    if ( task.name.startsWith("test") ) task.enabled = true
    if ( task.name.startsWith("testJunit") ) task.enabled = false
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}